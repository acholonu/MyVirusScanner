from __future__ import annotations

from pathlib import Path
from typing import List, Tuple

from utils import run_command


def run_default(verbose: bool = True) -> Tuple[List[str], List[str]]:
    """Default malware check without explicit paths. Verifies tools availability."""
    info: List[str] = []
    threats: List[str] = []

    cl = run_command(["clamscan", "--version"])
    if cl.returncode == 127:
        info.append("ClamAV not found. Install with `brew install clamav` to enable malware scanning.")
    else:
        info.append("ClamAV is installed. Run `macsecscan malware-scan --path ~` for a scan.")

    yr = run_command(["yara", "--version"])
    if yr.returncode == 127:
        info.append("YARA not found. Install with `brew install yara` to enable YARA scanning.")
    else:
        info.append("YARA is installed. Run `macsecscan yara-scan --rules yara_rules --path ~`. ")

    return info, threats


def _collect_yara_rule_files(rules_dir: Path) -> List[str]:
    files: List[str] = []
    for ext in ("*.yar", "*.yara"):
        files.extend([str(p) for p in rules_dir.glob(ext)])
    return files


def run_scan(scan_path: Path | None, rules_dir: Path | None, verbose: bool = True) -> Tuple[List[str], List[str]]:
    info: List[str] = []
    threats: List[str] = []

    if scan_path:
        cl = run_command(["clamscan", "-r", "--infected", str(scan_path)])
        if cl.returncode == 127:
            info.append("ClamAV not found. Install with `brew install clamav`.")
        elif "FOUND" in (cl.stdout or ""):
            threats.append("ClamAV detected infected files. Review ClamAV output.")
        else:
            info.append("No malware detected by ClamAV (or scan skipped).")
    else:
        info.append("ClamAV: No scan path provided; skipping.")

    if rules_dir and scan_path:
        rule_files = _collect_yara_rule_files(rules_dir)
        if not rule_files:
            info.append("No YARA rule files found in rules directory.")
            return info, threats
        yr = run_command(["yara", "-r", *rule_files, str(scan_path)])
        if yr.returncode == 127:
            info.append("YARA not found. Install with `brew install yara`.")
        elif yr.returncode == 0 and (yr.stdout or "").strip():
            threats.append("YARA matched one or more rules. Review matches.")
        elif yr.returncode in (0, 1):
            info.append("No YARA matches found.")
        else:
            info.append("YARA scan error; validate your rules.")
    else:
        info.append("YARA: Missing rules or path; skipping.")

    return info, threats


def run_yara_only(scan_path: Path, rules_dir: Path, verbose: bool = True) -> Tuple[List[str], List[str]]:
    info: List[str] = []
    threats: List[str] = []

    rule_files = _collect_yara_rule_files(rules_dir)
    if not rule_files:
        return ["No YARA rule files found in rules directory."], []
    yr = run_command(["yara", "-r", *rule_files, str(scan_path)])
    if yr.returncode == 127:
        info.append("YARA not found. Install with `brew install yara`.")
    elif yr.returncode == 0 and (yr.stdout or "").strip():
        threats.append("YARA matched one or more rules. Review matches.")
    elif yr.returncode in (0, 1):
        info.append("No YARA matches found.")
    else:
        info.append("YARA scan error; validate your rules.")

    return info, threats


